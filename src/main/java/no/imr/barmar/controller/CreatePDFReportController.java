package no.imr.barmar.controller;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.support.ServletContextResourceLoader;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import no.imr.barmar.ajax.controller.BarMarControllerFromDb;
import no.imr.barmar.geoserver.UrlConsts;
import no.imr.barmar.pdf.pojo.PDF_FilenameResponse;

/**
 *
 * @author trondwe
 * @author endrem
 */
@Controller
public class CreatePDFReportController {
    
    private static final Logger logger = LoggerFactory.getLogger(CreatePDFReportController.class);
	
	@Autowired
	private GetMapHelper mapHelper;
	
	@Autowired
	private BarMarControllerFromDb barmarController;
	
	private ResourceLoader resourceLoader = null;
	private BufferedImage theIMRLogoImage = null;
	private BufferedImage theSSFLogoImage = null;
	private JasperReport reportWithParameter = null;
	
	private final String logoHI = "html/imr/images/HIhoved_bla_bm-eng_CMYK2.jpg";
	private final String logoSSF = "html/imr/images/SSF_logo.jpg";
	private final String jasperReportUrl = "html/imr/images/barMar.jrxml";
	private final String generalText = "This report have been generated by the BarMar database," +
    	" and are a product of the Norwegian Research Council (http://www.forskningsradet.no)" +
    	" project Expected change in fisheries in the Barents Sea (BarMar), NRC contract nr 178338)" +
    	" under their NORKLIMA research program. The project was funded for the period 2007-2010, and was a" +
    	" joint project between the Institute of Marine Research (IMR, http://www.imr.no)" +
    	"  and Institute for Research in Economics and Business Administration (SNF, http:// http://www.snf.no)"; 

    private String tempImageFilePath = "";
    
	@RequestMapping(value = "/createpdfreport", method = RequestMethod.POST)
    public void createpdfreport( 
    		@RequestParam("width") Integer width,
    		@RequestParam("height") Integer height,
			@RequestParam("bbox") String bbox,
			@RequestParam("sld") String sld,
			@RequestParam("layer") String layer,
			@RequestParam("viewparams") String viewparams,
			@RequestParam("metadataRef") String metadataRef,
			HttpServletRequest request,
            HttpServletResponse resp) throws IOException, JRException {

    	String url = mapHelper.createBaseLayerUrl( width, height, bbox);
    	String secondLayer = mapHelper.createFishExchangeLayer( width, height, bbox, layer, sld, viewparams );
        String legendUrl = mapHelper.createFishExchangeLegend( layer, sld);
        
        logger.debug("baselayer:"+url);
        logger.debug("secondLayer:"+secondLayer);
        logger.debug("legendUrl:"+legendUrl);
        
        BufferedImage baseLayer = ImageIO.read( new URL(url) );
        logger.debug("pdf overlay:"+secondLayer);
        URL secondImg = new URL(secondLayer);
        URLConnection conn = secondImg.openConnection();
        conn.setAllowUserInteraction(true);
        conn.setRequestProperty("Content-Type", "image/png");
        conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36");
        //conn.connect();
        
    	Map<String, List<String>> map = conn.getHeaderFields();
    	for (Map.Entry<String, List<String>> entry : map.entrySet()) {
    		logger.debug("Key : " + entry.getKey() + 
                     " ,Value : " + entry.getValue());
    	}
        
        logger.debug("get content length:"+conn.getContentLength());
        logger.debug("url for second img is:"+secondImg.getHost()+""+secondImg.getPath()+secondImg.getQuery());
        logger.debug("content type:"+conn.getContentType());
        HttpURLConnection httpConnection = (HttpURLConnection) conn;
        InputStream inputStream;
        if (httpConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            inputStream = httpConnection.getInputStream();
            logger.debug("------ inputStream -----");
        } else {
        	logger.debug("------ errorStream-----");
            inputStream = httpConnection.getErrorStream();
        }
        
        BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
        String f = in.readLine();
        in.close();
        logger.debug("******ERROR STREAM"+f);
        
        int code = httpConnection.getResponseCode();
        logger.debug("second image - url status code:"+code);
        BufferedImage second = ImageIO.read( new URL(secondLayer) );
        logger.debug("pdf overlay image:"+second);
        BufferedImage legendImg = ImageIO.read( new URL(legendUrl) );

        BufferedImage theMapImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D g2d = (Graphics2D) theMapImage.getGraphics();
        g2d.drawImage(baseLayer, 0, 0, null);
        g2d.drawImage(second, 0, 0, null);

        if ( theIMRLogoImage == null) {
        	theIMRLogoImage = readImageFromResource( logoHI, request );
        }
        if ( theSSFLogoImage == null ) {
        	theSSFLogoImage = readImageFromResource( logoSSF, request );
        }
        
        HashMap<String,Object> parameterHash = new HashMap<String,Object>();
        parameterHash.put("ABOUT_FISHEXCHANGE", generalText);
        parameterHash.put("META_TEXT_PARAMETER", barmarController.getMetadataRef(metadataRef));
        parameterHash.put("IMR_Logo_Image", theIMRLogoImage);
        parameterHash.put("SSF_Logo_Image", theSSFLogoImage);
        parameterHash.put("Map_Image", theMapImage);
        parameterHash.put("LEGEND_image", legendImg);
         // FOR EMPTY DataSource use only parameters !!!parameterHash.put("META_TEXT", "Hallo mitt felt");
        
        setupJasperReportWithTemplate();
        JasperPrint printWithParameter = JasperFillManager.fillReport(reportWithParameter, parameterHash, new JREmptyDataSource());
//        OutputStream outputfile = response.getOutputStream();
//        JasperExportManager.exportReportToPdfStream(printWithParameter, outputfile);
//        outputfile.close();
        
        String fileName = "BarMarPdf_"+request.getParameter("displayLayerName")+".pdf";    
        if ( tempImageFilePath.equals("")) { //Get temporary file path
            File findDir = File.createTempFile("temp-file-name", ".tmp"); 
            String path = findDir.getAbsolutePath();
            tempImageFilePath = path.substring(0,path.lastIndexOf(File.separator));
            findDir.delete();
        }
        logger.error("tempImageFilePath"+tempImageFilePath);
        byte[] pdfBytes = JasperExportManager.exportReportToPdf(printWithParameter);
        resp.getOutputStream().write(pdfBytes);
        resp.getOutputStream().close();
        
        logger.error("pdfBytes.length:"+pdfBytes.length);
        
        //JasperExportManager.exportReportToPdfFile(printWithParameter, tempImageFilePath + File.separator + fileName);
        
/*
        PDF_FilenameResponse respJson = new PDF_FilenameResponse();
        respJson.setFilename(fileName);
        
        InputStream pdfStream = new FileInputStream(tempImageFilePath + File.separator + fileName);
        byte[] buf = new byte[8192];
        int c = 0;
        while ((c = pdfStream.read(buf, 0, buf.length)) > 0) {
            resp.getOutputStream().write(buf, 0, c);
            resp.getOutputStream().flush();
        }
        resp.getOutputStream().close();
        pdfStream.close();
        
        resp.setContentType("application/pdf");
        resp.setHeader("Content-Transfer-Encoding", "Binary");
        resp.setHeader("Content-Disposition", "attachment; filename='"+fileName+"';");
        //return respJson;
         * 
         */
	}
	
	private void setupJasperReportWithTemplate() throws IOException, JRException {
		if (  reportWithParameter == null ) {
			Resource jasperReport = resourceLoader.getResource( jasperReportUrl );
			InputStream inputfile = jasperReport.getInputStream();
			reportWithParameter = JasperCompileManager.compileReport(inputfile);
		}
	}
	
	private BufferedImage readImageFromResource( String pathToResource, HttpServletRequest request ) throws IOException {
		if ( resourceLoader == null ) {
	        ServletContext servletContext = request.getSession().getServletContext();
	        resourceLoader = new ServletContextResourceLoader( servletContext );			
		}
		Resource resource = resourceLoader.getResource(pathToResource);
        InputStream imageInputStream = resource.getInputStream();
        return ImageIO.read( imageInputStream );
	}

}
